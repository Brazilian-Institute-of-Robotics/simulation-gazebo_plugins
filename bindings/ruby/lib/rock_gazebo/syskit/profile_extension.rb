module RockGazebo
    module Syskit
        module ProfileExtension
            # The name of the SDF world we're under
            #
            # This is used as the transformer root frame as well
            #
            # @return [String]
            def sdf_world_name
                if frame = robot.sdf_world_name
                    frame
                else
                    raise SDFNotLoaded, "#{sdf_world_name} called but #use_sdf_model has not been called"
                end
            end

            # @api private
            #
            # Resolve the 'path' argument of use_sdf_model into a model object
            def resolve_sdf_model(*path)
                if path.size == 1 && !path.first.respond_to?(:to_str)
                    # Assume this is a SDF::Model object
                    path.first
                else
                    _, resolved_paths = Rock::Gazebo.resolve_worldfiles_and_models_arguments([File.join(*path)])
                    full_path = resolved_paths.first
                    if !File.file?(full_path)
                        raise ArgumentError, "#{File.join(*path)} cannot be resolved to a valid gazebo world"
                    end

                    models = SDF::Root.load(full_path).each_model.to_a
                    if models.size > 1
                        raise ArgumentError, "#{full_path} has more than one top level model, cannot use in use_sdf_model"
                    elsif models.empty?
                        raise ArgumentError, "#{full_path} has no top level model, cannot use in use_sdf_model"
                    end
                    models.first
                end
            end

            # Sets up this profile, robot and transformer according to the
            # information in the model at "path"
            #
            # @param [String] world_name the default name for the world. This is
            #   used only if a SDF world has not been loaded in the global
            #   configuration with use_gazebo_world. If one has been loaded, the
            #   world name will be used instead
            def use_sdf_model(*path, world_name: 'world')
                # This is a guard used by
                # ConfigurationExtension#use_gazebo_world to verify that
                # #use_gazebo_world was called first. Otherwise, devices for the
                # world models won't be defined and stuff like vizkit3d_world
                # won't be configured properly
                Conf.gazebo.has_profile_loaded = true

                model = resolve_sdf_model(*path)

                # Load the model in the syskit subsystems
                if Conf.gazebo.world?
                    world_name = Conf.gazebo.world.full_name
                    robot.load_sdf(model, world_name: world_name, models: Conf.gazebo.world.each_model.to_a)
                else
                    robot.load_sdf(model, world_name: world_name)
                end

                if !(device = robot.find_device(model.name))
                    raise RuntimeError, "cannot resolve device #{model.name}, it should have been created by RobotDefinitionExtension#load_sdf, got #{robot.each_master_device.map(&:name).sort.join(", ")}"
                end
                transformer.load_sdf(model)
                transformer.dynamic_transform device, model.name => world_name

                # Declare the transformations that can be generated by the
                # ModelTask on the transformer
                model.each_link do |link|
                    if dev = robot.find_device("#{link.name}_link")
                        transformer.dynamic_transform dev, link.full_name => world_name
                    else
                        raise ArgumentError, "expected to have a device called #{link.name}_link providing Rock::Devices::Gazebo::Link, but it does not exist. Got #{robot.each_master_device.map(&:name).sort.join(", ")}"
                    end
                end
            end

        end
        ::Syskit::Actions::Profile.include ProfileExtension
    end
end
